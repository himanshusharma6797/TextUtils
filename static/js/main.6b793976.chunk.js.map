{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","modeIs","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","modeIsDark","onClick","toggleModeDark","role","htmlFor","toUpperCase","modeIsGreen","toggleModeGreen","modeIsRed","toggleModeRed","modeIsBrown","toggleModeBrown","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","settext","charectersLength","length","wordsLength","split","Fragment","style","color","heading","backgroundColor","rows","value","autoFocus","onChange","event","target","console","log","toTheUpperCase","showAlert","toTheLowerCase","toLowerCase","forCapital","anArray","i","push","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","newText","defaultProps","aboutText","Alert","alert","word","lower","capitalize","msg","App","modeDark","setmodeDark","_useState3","_useState4","modeGreen","setmodeGreen","_useState5","_useState6","modeRed","setmodeRed","_useState7","_useState8","modeBrown","setmodeBrown","_useState9","_useState10","setalert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"6KAKe,SAASA,EAAOC,GAC7B,OAGEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,OAA1C,QAAAD,OAAuDL,EAAMM,SACzEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1Lb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAxD,SAEFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAUhBH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAoD,UAAnBL,EAAMiB,WAAqB,OAAO,UAC/EhB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBc,QAASlB,EAAMmB,eAAgBV,KAAK,WAAWW,KAAK,SAASL,GAAG,2BACpGd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,2BAA8C,UAAnBrB,EAAMiB,WAAqB,OAAO,SAASK,cAAlH,SAGFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAqD,UAApBL,EAAMuB,YAAsB,OAAO,QAApE,UACZtB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBc,QAASlB,EAAMwB,gBAAiBf,KAAK,WAAWW,KAAK,SAASL,GAAG,2BACrGd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,2BAA+C,UAApBrB,EAAMuB,YAAsB,QAAQ,SAASD,cAApH,SAGFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAmD,UAAlBL,EAAMyB,UAAoB,OAAO,UAC9ExB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBc,QAASlB,EAAM0B,cAAejB,KAAK,WAAWW,KAAK,SAASL,GAAG,2BACnGd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,2BAA6C,UAAlBrB,EAAMyB,UAAoB,MAAM,SAASH,cAAhH,SAGFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAqD,UAApBL,EAAM2B,YAAsB,OAAO,QAApE,UAEZ1B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBc,QAASlB,EAAM4B,gBAAiBnB,KAAK,WAAWM,GAAG,2BACvFd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,2BAA+C,UAApBrB,EAAM2B,YAAsB,QAAQ,SAASL,cAApH,YChDG,SAASO,EAAS7B,GAE/B,IAFsC8B,EA0BdC,mBAAS,IA1BKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GA0B/BK,EA1B+BH,EAAA,GA0BzBI,EA1ByBJ,EAAA,GAgClCK,EAAmBF,EAAKG,OACxBC,EAAcJ,EAAKK,MAAM,KAAKF,OAmClC,OACErC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuC,SAAA,KACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYsC,MAAO,CAACC,MAAsB,SAAf3C,EAAMM,OAAgB,QAAQ,UACtEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAM4C,SAEX3C,EAAAC,EAAAC,cAAA,YACAC,UAAU,eAAeW,GAAG,8BAC5B2B,MAAO,CAACG,gBAAgC,SAAf7C,EAAMM,OAAgB,OAAO,QAASqC,MAAsB,SAAf3C,EAAMM,OAAgB,QAAQ,SAAUwC,KAAK,IACnHC,MAAOZ,EACPa,WAAS,EACTC,SA3De,SAACC,GAEtBd,EAAQc,EAAMC,OAAOJ,WA4DjB9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBc,QAhFpB,WACpBkC,QAAQC,IAAI,yBAEZ,IAAIC,EAAiBnB,EAAKb,cAC1Bc,EAAQkB,GAERtD,EAAMuD,UAAU,0BAA2B,aA0EvC,wBAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA1EzB,WACpBkC,QAAQC,IAAI,yBAEZ,IAAIG,EAAiBrB,EAAKsB,cAC1BrB,EAAQoB,GAERxD,EAAMuD,UAAU,0BAA2B,aAoEvC,wBAGAtD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBc,QA5Cf,WAIzB,IAHA,IAAIwC,EAAavB,EAAKK,MAAM,KACxBmB,EAAU,GAELC,EAAI,EAAGA,EAAIF,EAAWpB,OAAQsB,IACrCD,EAAQE,KAAKH,EAAWE,GAAGE,OAAO,GAAGxC,cAAgBoC,EAAWE,GAAGG,MAAM,GAAGN,eAE9ErB,EAAQuB,EAAQK,KAAK,MACrBhE,EAAMuD,UAAU,+BAAgC,aAoC5C,6BAGAtD,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,uBAAuBc,QAnC1C,WACjB,IAAIiB,EAAO8B,SAASC,eAAe,+BACnC/B,EAAKgC,SACLC,UAAUC,UAAUC,UAAUnC,EAAKY,OACnC/C,EAAMuD,UAAU,uBAAwB,aA+BpC,aAGAtD,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,mBAAmBc,QA/BhC,WACvB,IAAIqD,EAAUpC,EAAKK,MAAM,QACzBJ,EAAQmC,EAAQP,KAAK,MACrBhE,EAAMuD,UAAU,wBAAyB,aA4BrC,uBAGAtD,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,uBAAuBc,QA7DpC,WACvBkC,QAAQC,IAAI,aACZjB,EAAQ,IAERpC,EAAMuD,UAAU,gBAAiB,aAyD7B,eAIFtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYsC,MAAO,CAACC,MAAsB,SAAf3C,EAAMM,OAAgB,QAAQ,UACtEL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACGoC,EADH,cAC2BF,EAD3B,eAGApC,EAAAC,EAAAC,cAAA,SAAI,KAAQoC,EAAZ,oBACAtC,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIgC,EAAKG,OAAO,EAAEH,EAAK,6DD3C/BpC,EAAOyE,aAAe,CACpBhE,MAAO,iBACPiE,UAAW,mBC+Cb5C,EAAS2C,aAAe,CACtB5B,QAAS,mCClGI8B,MAjBf,SAAe1E,GAMX,OAEIA,EAAM2E,OAGN1E,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAM2E,MAAMlE,KAA7B,gCAAiEW,KAAK,SAChFnB,EAAAC,EAAAC,cAAA,cAXW,SAACyE,GAChB,IAAMC,EAAQD,EAAKnB,cACnB,OAAQoB,EAAMf,OAAO,GAAGxC,cAAgBuD,EAAMd,MAAM,GASvCe,CAAW9E,EAAM2E,MAAMlE,OADpC,KACsDT,EAAM2E,MAAMI,MCwH3DC,MAnHf,WAAe,IAAAlD,EACmBC,mBAAS,SAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNmD,EADMjD,EAAA,GACIkD,EADJlD,EAAA,GAAAmD,EAEqBpD,mBAAS,SAF9BqD,EAAAnD,OAAAC,EAAA,EAAAD,CAAAkD,EAAA,GAENE,EAFMD,EAAA,GAEKE,EAFLF,EAAA,GAAAG,EAGiBxD,mBAAS,SAH1ByD,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAGNE,EAHMD,EAAA,GAGGE,EAHHF,EAAA,GAAAG,EAIqB5D,mBAAS,SAJ9B6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAINE,EAJMD,EAAA,GAIKE,EAJLF,EAAA,GAAAG,EAMahE,mBAAS,MANtBiE,EAAA/D,OAAAC,EAAA,EAAAD,CAAA8D,EAAA,GAMNpB,EANMqB,EAAA,GAMCC,EANDD,EAAA,GAQPzC,EAAY,SAAC2C,EAASzF,GAC1BwF,EAAS,CACPlB,IAAKmB,EACLzF,KAAMA,IAER0F,WAAW,WACTF,EAAS,OACR,OAsEL,OAAQhG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuC,SAAA,KAIJxC,EAAAC,EAAAC,cAACJ,EAAD,CAAQS,MAAM,aAAaiE,UAAU,mBAAmBxD,WAAYgE,EAAU1D,YAAa8D,EAAW5D,UAAWgE,EAAS9D,YAAakE,EAAW1E,eAtEzH,WACV,UAAb8D,GACFC,EAAY,QACZjB,SAASmC,KAAK1D,MAAMG,gBAAkB,UACtCU,EAAU,6BAA8B,WACxCU,SAASzD,MAAQ,0BASjB0E,EAAY,SACZjB,SAASmC,KAAK1D,MAAMG,gBAAkB,QACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,2BAqDuKgB,gBAhD9J,WACV,UAAd6D,GACFC,EAAa,SACbrB,SAASmC,KAAK1D,MAAMG,gBAAkB,YACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,2BAEjB8E,EAAa,SACbrB,SAASmC,KAAK1D,MAAMG,gBAAkB,QACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,2BAsC+MkB,cAjCxM,WACV,UAAZ+D,GACFC,EAAW,OACXzB,SAASmC,KAAK1D,MAAMG,gBAAkB,YACtCU,EAAU,4BAA6B,WACvCU,SAASzD,MAAQ,yBAEjBkF,EAAW,SACXzB,SAASmC,KAAK1D,MAAMG,gBAAkB,QACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,2BAuBmPoB,gBAlB1O,WACV,UAAdiE,GACFC,EAAa,SACb7B,SAASmC,KAAK1D,MAAMG,gBAAkB,UACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,2BAEjBsF,EAAa,SACb7B,SAASmC,KAAK1D,MAAMG,gBAAkB,QACtCU,EAAU,8BAA+B,WACzCU,SAASzD,MAAQ,6BAWjBP,EAAAC,EAAAC,cAACkG,EAAD,CAAO1B,MAAOA,IACd1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAebH,EAAAC,EAAAC,cAAC0B,EAAD,CAAU0B,UAAWA,EAAWjD,OAAQ2E,OCnHjCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDdY,IAASC,OACPnH,EAAAC,EAAAC,cAACF,EAAAC,EAAMmH,WAAP,KACEpH,EAAAC,EAAAC,cAACmH,EAAD,OAEFrD,SAASC,eAAe,SAM1BoC","file":"static/js/main.6b793976.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n// always import the proptypes from the proptypes\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    // <div>Hi i am a Navbar</div>\r\n    // {/* Bootstrap */}\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.modeIs} bg-${props.modeIs}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n              {/* <a className=\"nav-link\" href=\"/\">{props.aboutText}</a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className =\"d-flex\">\r\n        <input className =\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className =\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n          {/* switch one dark*/}\r\n          <div className={`form-check form-switch text-${props.modeIsDark==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleModeDark} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" /> \r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{(props.modeIsDark==='light'?'dark':'light').toUpperCase()}MODE</label>\r\n          </div>\r\n          {/* switch two green*/}\r\n          <div className={`form-check form-switch text-${props.modeIsGreen==='light'?'dark':'light'} mx-3`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleModeGreen} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" /> \r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{(props.modeIsGreen==='light'?'green':'light').toUpperCase()}MODE</label>\r\n          </div>\r\n          {/* switch three red*/}\r\n          <div className={`form-check form-switch text-${props.modeIsRed==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleModeRed} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" /> \r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{(props.modeIsRed==='light'?'red':'light').toUpperCase()}MODE</label>\r\n          </div>\r\n          {/* switch four brown*/}\r\n          <div className={`form-check form-switch text-${props.modeIsBrown==='light'?'dark':'light'} mx-3`}>\r\n            {/* while i m removing role=\"switch\" attribute there is nothing changes */}\r\n            <input className=\"form-check-input\" onClick={props.toggleModeBrown} type=\"checkbox\" id=\"flexSwitchCheckDefault\" /> \r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{(props.modeIsBrown==='light'?'brown':'light').toUpperCase()}MODE</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  // title should be in string\r\n  aboutText: PropTypes.string.isRequired\r\n  // here we using isRequired for getting the value is required if not then we get error\r\n  // and aboutText also string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About text here'\r\n};\r\n// if we not pass the values then the it will take from here","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  // Making in UpperCase\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase was clicked\");\r\n    // settext('You have clicked on handle up click')\r\n    let toTheUpperCase = text.toUpperCase();\r\n    settext(toTheUpperCase);\r\n    // now we change the text to uppercase\r\n    props.showAlert('Converted to uppercase!', 'success');\r\n  };\r\n  // Making in LowerCase\r\n  const handleLoClick = () => {\r\n    console.log(\"Lowercase was clicked\");\r\n    // settext('You have clicked on handle up click')\r\n    let toTheLowerCase = text.toLowerCase();\r\n    settext(toTheLowerCase);\r\n    // now we change the text to lowercase\r\n    props.showAlert('Converted to lowercase!', 'success');\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Change\");\r\n    settext(event.target.value);\r\n    // by this we can target\r\n  };\r\n\r\n  const [text, settext] = useState(\"\");\r\n  // use state hook help us to make the state variable, text is the value by default in the inside of the usestate brackets\r\n  // and settext is the function that we can use any time for updating the textState\r\n  // text = 'new text' // wrong way to change the state\r\n  // settext = 'new text' // correct way to change the state\r\n\r\n  let charectersLength = text.length;\r\n  let wordsLength = text.split(\" \").length;\r\n\r\n  // for clearing the text\r\n  const handleClearClick = () => {\r\n    console.log(\"All Clear\");\r\n    settext(\"\");\r\n    // this is for clearing the string\r\n    props.showAlert('Text cleared!', 'success');\r\n  };\r\n\r\n  // for Capital\r\n  const handleCapitalClick = ()=>{\r\n    let forCapital = text.split(\" \");\r\n    let anArray = [];\r\n    // console.log(forCapital);\r\n    for (let i = 0; i < forCapital.length; i++) {\r\n      anArray.push(forCapital[i].charAt(0).toUpperCase() + forCapital[i].slice(1).toLowerCase());\r\n    }\r\n    settext(anArray.join(\" \"));\r\n    props.showAlert('Converted to capital letter!', 'success');\r\n  } \r\n\r\n\r\n  const handleCopy = () =>{\r\n    let text = document.getElementById('exampleFormControlTextarea1');\r\n    text.select();  // this will select the whole text\r\n    navigator.clipboard.writeText(text.value); // this navigator interface will copy the selected value from the text value\r\n    props.showAlert('Copied to Clipboard!', 'success');\r\n  }\r\n\r\n  const handleExtraSapce = ()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    settext(newText.join(\" \"));\r\n    props.showAlert('Removed extra spaces!', 'success');\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.modeIs==='dark'?'white':'black'}}>\r\n        <div className=\"mb-3\">\r\n          <h1>{props.heading}</h1>\r\n          {/* <h1>{props.heading} - {text}</h1> */}\r\n          <textarea \r\n          className=\"form-control\" id=\"exampleFormControlTextarea1\" \r\n          style={{backgroundColor: props.modeIs==='dark'?'grey':'white', color: props.modeIs==='dark'?'white':'black'}} rows=\"8\" \r\n          value={text}\r\n          autoFocus\r\n          onChange={handleOnChange}>\r\n          </textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary\" onClick={handleCapitalClick}>\r\n          Convert to Capital Letter\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-primary \" onClick={handleExtraSapce}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container\" style={{color: props.modeIs==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {wordsLength} Words and {charectersLength} Characters\r\n        </p>\r\n        <p>{0.008 * wordsLength} Minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.defaultProps = {\r\n  heading: \"Enter the Text to Analyze Below\",\r\n};","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return (lower.charAt(0).toUpperCase() + lower.slice(1));\r\n    }\r\n\r\n    return (\r\n        // if first is true in the && then it will go for the second but if it is false or null then it will terminate\r\n        props.alert \r\n        // this is happens because all the jsx will be converted to javascript Calls!\r\n        && \r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","  // import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport { useState } from 'react'\nimport Alert from './components/Alert';\nimport React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   // Switch,\n//   Routes,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\n// let myName='Himanshu';\n// let myNameTwo='<b>Himanshu Don</b>';  // this is not a bug \nfunction App() {\n  const [modeDark, setmodeDark] = useState('light');  //whether dark mode is enableor not\n  const [modeGreen, setmodeGreen] = useState('light');  // green\n  const [modeRed, setmodeRed] = useState('light');  // red\n  const [modeBrown, setmodeBrown] = useState('light');  // brown\n\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500)\n  }\n\n  // Dark and light theam\n  const handleToggleModeDark = () => {\n    if (modeDark === 'light') {\n      setmodeDark('dark')\n      document.body.style.backgroundColor = '#0f2332';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'Download now!';\n      // }, 400);\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing!';\n      // }, 703);\n      // we use this set interval for blinking the text like in evil websites example \"your mobile in danger\" or \"install this antivirus\" etc\n    } else {\n      setmodeDark('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n// green\n  const handleToggleModeGreen = () => {\n    if (modeGreen === 'light') {\n      setmodeGreen('green')\n      document.body.style.backgroundColor = '#45b412ec';\n      showAlert(\"Green mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Green Mode';\n    } else {\n      setmodeGreen('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  // red\n  const handleToggleModeRed = () => {\n    if (modeRed === 'light') {\n      setmodeRed('red')\n      document.body.style.backgroundColor = '#b41212ec';\n      showAlert(\"Red mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Red Mode';\n    } else {\n      setmodeRed('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  // brown\n  const handleToggleModeBrown = () => {\n    if (modeBrown === 'light') {\n      setmodeBrown('brown')\n      document.body.style.backgroundColor = '#712908';\n      showAlert(\"Brown mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Brown Mode';\n    } else {\n      setmodeBrown('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (<>\n    {/* <Router> */}\n      {/* <Navbar/> */}\n      {/* this will show the default properties */}\n      <Navbar title=\"Text Utils\" aboutText=\"About TextUtiles\" modeIsDark={modeDark} modeIsGreen={modeGreen} modeIsRed={modeRed} modeIsBrown={modeBrown} toggleModeDark={handleToggleModeDark} toggleModeGreen={handleToggleModeGreen} toggleModeRed={handleToggleModeRed} toggleModeBrown={handleToggleModeBrown} />\n      {/* if we passes the number then we got error because we give the proptype is string */}\n      {/* we can change from here if we make the another web site */}\n      <Alert alert={alert} />\n      <div className='container my-3'>\n        {/* container is the class in bootstrap that will middle the container\n      my-3 is also the class that will margin the content in y direction */}\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        {/* <Switch> */}\n        {/* we can not use switch because it is deprecated from react now we use Routes instead of switch */}\n        {/* <Routes> */}\n          {/* /users ----> component 1\n          /users/home ----> component 2 \n          to avoid this conflict we should use exact*/}\n          {/* <Route exact path=\"/about\"  element={<About/>}/>   */}\n          {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} modeIs={mode} />}/> */}\n        {/* </Routes> */}\n        {/* </Switch> */}\n        <TextForm showAlert={showAlert} modeIs={modeDark} />\n      </div>\n    {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n\n/* <nav>\n<li>Home</li>\n<li>About</li>\n<li>Contact</li>\n</nav>\n<div className Name='container'>\n<h1>Hello {myName}\nthis is js in the curly braces\n</h1>\n<h2>{myNameTwo}</h2>\nthis will be rendering the tags also but we can also use this by some method soon\n<p>\nLorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas eaque voluptatum quas commodi molestiae ad laboriosam, illo nemo repudiandae nisi neque asperiores repellat at, placeat cum beatae nesciunt, natus recusandae.Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas eaque voluptatum quas commodi molestiae ad laboriosam, illo nemo repudiandae nisi neque asperiores repellat at, placeat cum beatae nesciunt, natus recusandae.Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas eaque voluptatum quas commodi molestiae ad laboriosam, illo nemo repudiandae nisi neque asperiores repellat at, placeat cum beatae nesciunt, natus recusandae. \n</p>\n</div>\n<div className Name='blank'>Lovely</div> */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}